Особенности реализации методов:
1. После current_position следует saved_position
2. 0FFFFh в current_position - пустой символ.




Функции:
1. Закодировать все фигуры в буферы.
Как это выглядит в коде.
	table_figures:
		rotate_straight:
			.............................
			figure_square	dw		CC00h
			.............................
		rotate_left:
			.............................
		.................................
		rotate_overturned:
Как это выглядит в голове.
  1 2 3 4
 ---------
1|x|x| | |
 |-|-|-|-|
2|x|x| | |
 |-|-|-|-|
3| | | | |
 |-|-|-|-|
4| | | | |
 ---------
 
 Такая матрица 4х4, которая разворачивается
 в прямую:
 0 1 2 3 4 5 6 7 8 9 A B C D E F
---------------------------------
|x|x| | |x|x| | | | | | | | | | | 
---------------------------------

2. Закодировать игровое поле как таблицу (смотрите
в lvl80.asm, table1).
game_field:
	db	0000h
	db	0000h
	.........
	db	0000h
	
3. Закодировать текущее положение фигуры как:
	current_position:
		db		0000h
		db		0000h
		db		0000h
		db		0000h
	
	saved_position:
		db		0000h
		db		0000h
		db		0000h
		db		0000h
	Закодировать текущий поворот фигуры
		current_rotate		db		0
		
		saved_rotate		db		0
	

4. Написать функцию calculate_configuration.
На вход: ax - номер фигуры.
current_rotate - в этом буфере лежит текущий поворот
фигуры.
На выход: вернуть адрес байта, в котором лежит 
необходимая конфигурация.

5. Написать функцию border_equalizer.
На вход: ax - указатель на новую конфигурацию
bx - левый верхний угол для предыдущией конфигурации
На выход: вернуть в bx левый верхний угол с учётом
возможного "расширения" квадрата.
Пример:
  C D E F             C D E F
 ---------           ---------
1| | |x| |			1| | | |x|
 |-|-|-|-|           |-|-|-|-|
2| | |x| |   --->   2| |x|x|x|
 |-|-|-|-|           |-|-|-|-|
3| | |x|x|          3| | | | |
 |-|-|-|-|           |-|-|-|-|
4| | | | |          4| | | | |
 ---------           ---------
 
В bx приходит 000Eh. Возвращается 000Dh.


6. Написать функцию from_pattern. 
На вход: в регистре ax
приходит число - указатель на один из шаблонов новой 
фигурки.
В регистре bx - указатель на верхний левый угол 
квадрата 4х4, в который помещается на игровое поле
шаблон фигурки.
На выходе:	в current_position на место каждого байта
кладётся координата, на месте которой должна родиться/появиться
фигура.
Пример: на вход приходит число, соответствующее квадрату.
Поворот квадрата извлекается из соответствующего буфера.
От метки table_figures
вычисляется соответствующий сдвиг. (Пусть нам пришло число,
которое соответствует квадрату).  Функция вытаскивает число
CC00h.
Из регистра bx берётся адрес левого верхнего расположения фигуры.
Далее мы располагаем этот квадрат следующим образом:

  0 1 2 3 4 5 6 7 8 9 A B C D E F
 ---------------------------------
0| | | | | | | |x|x| | | | | | | |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
1| | | | | | | |x|x| | | | | | | |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
2| | | | | | | | | | | | | | | | |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
3| | | | | | | | | | | | | | | | |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
4| | | | | | | | | | | | | | | | |
 ---------------------------------
 Иными словами, квадрат с паттерном должен расположиться
 в следующем месте игровой доски:
   1 2 3 4
 ---------
1|x|x| | |
 |-|-|-|-|
2|x|x| | |
 |-|-|-|-|
3| | | | |
 |-|-|-|-|
4| | | | |
 ---------
	
   ||
   ||
   \/
 
  7 8 9 A
 ---------
1|x|x| | |
 |-|-|-|-|
2|x|x| | |
 |-|-|-|-|
3| | | | |
 |-|-|-|-|
4| | | | |
 ---------
 
 И в конце работы функции current_position имеет следующий вид:
 
 current_position:
		db		0007h
		db		0008h
		db		0017h
		db		0018h
		
 Для фигур, которые имеют меньше четырёх клеточек, нижние клетки
 обозначить спецсимволом ffffh.
 
7. Написать функцию get_position вычисления левого крайнего угла
 квадрата 4х4, в котором лежит current_position.
На вход: в буфере current_position лежат адреса занимаемых клеточек.
На выход: Вычисление левого верхнего угла квадрата 4х4, в котором
лежит шаблон текущей фигуры.

8. Написать функцию saved_configuration.
Сохраняет текущее расположение фигуры и поворот в буфер saved_position
и saved_rotate.

9. Написать функцию check_position.
На выход: в ax - 0 или 1.
Сравнивает current_position и game_field на предмет общих
точек. Если нет общих точек - возвращает 0. Если есть - 1.
Не требуется отслеживать выход за границы поля!

10. Написать функцию restore_configuration.
Восстанавливает из буферов saved_position и saved_rotate конфигурацию
фигуры.

11. Написать функцию move_figure.
На вход: в ax - направление. 0, 1, 2, 3 (вверх, вниз, влево, вправо)
На выходе: Меняет координаты current_position в нужном направлении,
если это можно сделать. Используйте saved_configuration и check_position.

 
12. Написать функцию разворота rotate_figure.
 На вход: в регистре ax приходит 0 или 1 (влево и вправо)
 На выход: изменить в таблице current_position координаты изменить 
 номер поворота.
 
 Поворот направо:
 
  5 6 7 8             5 6 7 8
 ---------           ---------
1|x| | | |			1| | |x| |
 |-|-|-|-|           |-|-|-|-|
2|x| | | |   --->   2|x|x|x| |
 |-|-|-|-|           |-|-|-|-|
3|x|x| | |          3| | | | |
 |-|-|-|-|           |-|-|-|-|
4| | | | |          4| | | | |
 ---------           ---------
 
Примерный план: 
1. сохрани состояние
2. вычисли левый верхний угол 4х4
3. вычисли состояние поворота. измени его в буфере
4. выравняй через выравниватель левый верхний угол
5. вызови from_pattern и измени current_position
6. проверь через check_position состояние. Если плохо восстанови - буферы и выходи
7. если хорошо - восстанови регистры и выходи

13. Написать функцию clear_screen.
На вход: ничего
На выход: функция должна почистить
все клеточки внутри игрового поля.

14. Написать функцию draw
На вход: ничего
На выход: Рисует текущее состояние игры.

15.	Написать функцию integrate_figure.
На вход: ничего
На выход: Игровое поле добавляет к себе элементы от current_position.

16. Написать функцию shift_down
На вход: ax - строчка, с которой фигурки "падают"
На выход: все строчки выше указанной в игровом поле
перемещаются вниз.

17. Написать функцию search_lines
На вход: ничего
На выход: находит и удаляет все сплошные строчи. Использует
shift_down. После отработки функции, игровое поле готово
к генерации новой фигурки.

18. Нужна функция bcd_converting.
На вход в регистре ax приходит число в формате bcd.
На выход в ax - тоже самое число


19. Написать генератор следующей фигуры figure_generator.
На вход: ничего
На выход: в ax возвращает номер следующей фигуры. Использует 
системный таймер и функцию bcd_converting

20. Написать функцию num2buf. 
Вход: ax - число
bx - сслыка на буфер
Выход: кладёт в буфер bx число в десятично системе

 
 
 Фишки:
1. Прозрачные стены
2. Счёт
3. Следующая фигура
4. Бомба
5. Заставка
6. Меню
7. Финальные титры
8. Новая фигура
9. 
 